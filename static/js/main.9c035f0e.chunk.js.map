{"version":3,"sources":["DownloadButtons.js","utils/days.js","Table.js","Organizer.js","App.js","serviceWorker.js","index.js"],"names":["DownloadButtons","usedRef","onClick","exportComponentAsJPEG","exportComponentAsPDF","days","days_english","Table","tableObj","currentRef","useRef","className","ref","name","map","day","i","key","id","Organizer","useState","setName","cell","setCell","setDay","period","setPeriod","Array","fill","daysTable","setDays","setTableObj","useEffect","newDaysTable","Object","assign","htmlFor","type","value","onChange","e","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c035f0e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { exportComponentAsJPEG, exportComponentAsPDF } from \"react-component-export-image\";\r\n\r\nconst DownloadButtons = ({usedRef}) => {\r\n    return (\r\n        <div>\r\n            <button onClick={() => exportComponentAsJPEG(usedRef)}>\r\n           تحميل الجدول كصورة\r\n            </button>\r\n            <button onClick={() => exportComponentAsPDF(usedRef)}>\r\n           تحميل الجدول كPDF\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DownloadButtons;","const days = ['السبت', 'الأحد', 'الاثنين', 'الثلاثاء', 'الاربعاء', 'الخميس', 'الجمعة'];\r\nconst days_english = ['sat', 'sun', 'mon', 'tue', 'wed', 'thu', 'fri'];\r\n\r\nexport {days, days_english};","import React, {useRef} from 'react';\r\nimport DownloadButtons from './DownloadButtons';\r\nimport './css/Table.css';\r\nimport {days, days_english} from './utils/days';\r\n\r\n\r\nconst Table = ({ tableObj }) => {\r\n    const currentRef = useRef(null);\r\n\r\n    return (\r\n        <div className=\"table-wrapper\">\r\n        <table className=\"table\" ref={currentRef}>\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{tableObj.name}</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n\r\n            {days.map((day, i) => {\r\n                        return (<tr key={i}><td className=\"no-padding\"><table><tbody>\r\n                    <tr>\r\n                        <td>{day} 8:30 - 10</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>10:20 - 12:00</td> \r\n                    </tr>\r\n                    <tr>\r\n                        <td>12:10 - 1:50</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>2:00 - 3:40</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>3:50 - 5:30</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>5:40 - 7:20</td>\r\n                    </tr>\r\n                </tbody></table></td>\r\n                \r\n                <td className=\"no-padding\"><table id={`${days_english[i]}-table`}><tbody>\r\n                    <tr>\r\n                        <td>{tableObj['days'][days_english[i]][0]}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{tableObj['days'][days_english[i]][1]}</td> \r\n                    </tr>\r\n                    <tr>\r\n                        <td>{tableObj['days'][days_english[i]][2]}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{tableObj['days'][days_english[i]][3]}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{tableObj['days'][days_english[i]][4]}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{tableObj['days'][days_english[i]][5]}</td>\r\n                    </tr>\r\n                </tbody></table></td>\r\n                </tr>)\r\n                    })}\r\n                \r\n            </tbody>\r\n        </table>\r\n        <DownloadButtons usedRef={currentRef} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, {useState, useEffect} from 'react';\r\nimport Table from './Table';\r\nimport {days, days_english} from './utils/days';\r\n\r\nconst Organizer = () => {\r\n    \r\n    const [name, setName] = useState('جدول');\r\n    const [cell, setCell] = useState('');\r\n    const [day, setDay] = useState('sat');\r\n    const [period, setPeriod] = useState(0);\r\n    const [daysTable, setDays] = useState({\r\n        \"sat\": Array(6).fill(''),\r\n        \"sun\": Array(6).fill(''),\r\n        \"mon\": Array(6).fill(''),\r\n        \"tue\": Array(6).fill(''),\r\n        \"wed\": Array(6).fill(''),\r\n        \"thu\": Array(6).fill(''),\r\n        \"fri\": Array(6).fill('')\r\n    });\r\n    const [tableObj, setTableObj] = useState({\r\n        name,\r\n        days: {...daysTable}\r\n    });\r\n\r\n    useEffect(() => {\r\n        setTableObj({\r\n            name,\r\n            days: {...daysTable}\r\n        })\r\n    }, [name, setName, daysTable, setDays])\r\n\r\n    useEffect(() => {\r\n        let newDaysTable = Object.assign({}, daysTable);\r\n        newDaysTable[day][period] = cell;\r\n        setDays(newDaysTable);\r\n    }, [cell, setCell, period, setPeriod, day, setDay]);\r\n\r\n    const handlePeriodChange = (e) => {\r\n        setPeriod(e.target.value);\r\n        setCell(daysTable[day][e.target.value]);\r\n    }\r\n\r\n    const handleDayChange = (e) => {\r\n        setDay(e.target.value);\r\n        setPeriod(0)\r\n        setCell(daysTable[e.target.value][period]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label htmlFor=\"table-name\">اسم الجدول</label>\r\n                <input type=\"text\" value={name} onChange={e => setName(e.target.value)} id=\"table-name\" />\r\n            </div>\r\n            <div>\r\n                <label>اليوم</label>\r\n                <select value={day} onChange={handleDayChange}>\r\n                    {days.map((day, i) => <option value={days_english[i]} key={days_english[i]}>{day}</option>)}\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label>الفترة</label>\r\n                <select value={period} onChange={handlePeriodChange}>\r\n                    <option value=\"0\">8:30 - 10 (الاولى)</option>\r\n                    <option value=\"1\">10:20 - 12:00 (الثانية)</option>\r\n                    <option value=\"2\">12:10 - 1:50 (الثالثة)</option>\r\n                    <option value=\"3\">2:00 - 3:40 (الرابعة)</option>\r\n                    <option value=\"4\">3:50 - 5:30 (الخامسة)</option>\r\n                    <option value=\"5\">5:40 - 7:20 (السادسة)</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"\">القيمة</label>\r\n                <input type=\"text\" value={cell} onChange={e => setCell(e.target.value)} />\r\n            </div>\r\n            <Table tableObj={tableObj} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Organizer;","import React from 'react';\nimport Organizer from './Organizer';\n\n\nfunction App() {\n  return (\n    <div>\n      <Organizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}